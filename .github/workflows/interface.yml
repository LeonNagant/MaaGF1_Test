name: Interface JSON Format Check

on:
  push:
    branches:
      - "**"
    paths:
      - "assets/interface.json"
  pull_request:
    branches:
      - "**"
    paths:
      - "assets/interface.json"
  workflow_dispatch:

jobs:
  interface_check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Check if interface.json exists
        id: check_file
        run: |
          if [ -f "assets/interface.json" ]; then
            echo "file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "file_exists=false" >> $GITHUB_OUTPUT
            echo "assets/interface.json not found"
            exit 1
          fi

      - name: Validate and format JSON
        id: format_json
        if: steps.check_file.outputs.file_exists == 'true'
        run: |
          echo "Checking JSON syntax and formatting..."
          
          cp assets/interface.json assets/interface.json.backup
          
          if ! python -m json.tool assets/interface.json > /dev/null 2>&1; then
            echo "JSON syntax error in assets/interface.json"
            python -m json.tool assets/interface.json
            exit 1
          fi
          
          python -c "
          import json
          import sys
          
          def format_json_file(input_file, output_file):
              try:
                  with open(input_file, 'r', encoding='utf-8') as f:
                      data = json.load(f)
                  
                  with open(output_file, 'w', encoding='utf-8') as f:
                      json.dump(data, f, indent=4, ensure_ascii=False, sort_keys=False)
                  
                  return True
              except Exception as e:
                  print(f'Error formatting JSON: {e}')
                  return False
          
          if format_json_file('assets/interface.json', 'assets/interface.json.formatted'):
              print('JSON formatted successfully')
          else:
              print('Failed to format JSON')
              sys.exit(1)
          "
          
          if ! cmp -s assets/interface.json assets/interface.json.formatted; then
            echo "JSON formatting changes detected"
            mv assets/interface.json.formatted assets/interface.json
            echo "needs_commit=true" >> $GITHUB_OUTPUT
            echo "JSON file has been formatted"
          else
            echo "JSON file is already properly formatted"
            rm assets/interface.json.formatted
            echo "needs_commit=false" >> $GITHUB_OUTPUT
          fi
          
          rm assets/interface.json.backup

      - name: Verify JSON schema (optional)
        if: steps.check_file.outputs.file_exists == 'true'
        run: |
          echo "Performing additional JSON validation..."
          
          python -c "
          import json
          import sys
          
          try:
              with open('assets/interface.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              required_fields = ['name', 'version', 'controller', 'resource', 'task']
              missing_fields = [field for field in required_fields if field not in data]
              
              if missing_fields:
                  print(f'Missing required fields: {missing_fields}')
                  sys.exit(1)
              
              if not isinstance(data.get('task'), list):
                  print('\"task\" field must be an array')
                  sys.exit(1)
              
              print('JSON structure validation passed')
              
          except json.JSONDecodeError as e:
              print(f'JSON decode error: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'Validation error: {e}')
              sys.exit(1)
          "

      - name: Check for changes
        id: git_diff
        if: steps.format_json.outputs.needs_commit == 'true'
        run: |
          git diff --name-only
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit formatted JSON
        if: steps.format_json.outputs.needs_commit == 'true' && steps.git_diff.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "JSON Format Bot"
          
          git add assets/interface.json
          git commit -m "Auto-format interface.json
          
          - Standardized JSON formatting with 4-space indentation
          - Ensured consistent formatting across the project
          - Validated JSON syntax and structure
          
          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Push changes
        if: steps.format_json.outputs.needs_commit == 'true' && steps.git_diff.outputs.has_changes == 'true'
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "Pushing to branch: $BRANCH_NAME"
          
          git push origin $BRANCH_NAME

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.format_json.outputs.needs_commit == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**JSON Format Bot**
              
              I've automatically formatted \`assets/interface.json\` to ensure consistent formatting:
              
              **Changes Applied:**
              - Standardized to 4-space indentation
              - Removed mixed tab/space usage
              - Validated JSON syntax and structure
              
              The file has been automatically updated in this PR. Please review the changes.`
            })

      - name: Summary
        if: always()
        run: |
          echo "Interface JSON Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_file.outputs.file_exists }}" = "true" ]; then
            echo "**File Found:** assets/interface.json exists" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.format_json.outputs.needs_commit }}" = "true" ]; then
              echo "**Action Taken:** File has been automatically formatted" >> $GITHUB_STEP_SUMMARY
              echo "**Changes:** Standardized indentation and formatting" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** File is already properly formatted" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Error:** assets/interface.json not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This check ensures consistent JSON formatting across the project." >> $GITHUB_STEP_SUMMARY